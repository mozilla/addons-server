####################################################################################################
# Our makefile makes use of docker compose commands. Our config files rely on environment variables
# both for passing configuration to the containers as well as configuring the compose file itself.
# Variables referenced in docker-compose*.yml should be read from .env, exported and saved in .env
####################################################################################################

DOCKER_PROGRESS ?= auto
DOCKER_METADATA_FILE ?= buildx-bake-metadata.json
DOCKER_PUSH ?=
export DOCKER_COMMIT ?=
export DOCKER_BUILD ?=
export DOCKER_VERSION ?=
export DATA_BACKUP_SKIP ?=
override DOCKER_MYSQLD_VOLUME = addons-server_data_mysqld

define READ_ENV
$(shell cat .env | grep $(1) | cut -d '=' -f2)
endef

define IS_LOCAL
$(if $(findstring :local, $(call READ_ENV,DOCKER_TAG)),true,false)
endef

INITIALIZE_ARGS ?=
INIT_CLEAN ?=
INIT_LOAD ?=

ifneq ($(INIT_CLEAN),)
	INITIALIZE_ARGS += --clean
endif

ifneq ($(INIT_LOAD),)
	INITIALIZE_ARGS += --load $(INIT_LOAD)
endif

DOCKER_BAKE_ARGS := \
	--file docker-bake.hcl \
	--file .env \
	--progress $(DOCKER_PROGRESS) \
	--metadata-file $(DOCKER_METADATA_FILE) \
	--set "*.args.DOCKER_TARGET=$(call READ_ENV,DOCKER_TARGET)"

ifeq ($(DOCKER_PUSH), true)
	DOCKER_BAKE_ARGS += --push
endif

# Paths should be cleaned before mounting .:/data/olympia
# These are files which should be sourced from the container
# or should be fresh on every run of the project
CLEAN_PATHS := \
	src/olympia.egg-info \
	supervisord.pid \
	version.json \
	logs \
	buildx-bake-metadata.json \

.PHONY: help_redirect
help_redirect:
	@$(MAKE) help --no-print-directory

.PHONY: help_submake
help_submake:
	@echo "Host only commands:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' Makefile-os | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
	@echo "\nAll other commands will be passed through to the docker 'web' container make:"
	@make -f Makefile-docker help_submake

.PHONY: test_setup
test_setup:
	npm exec jest -- ./tests/make --runInBand

.PHONY: setup_files
setup_files: ## Setup the host files
	$(foreach path,$(CLEAN_PATHS),rm -rf $(PWD)/$(path) && echo "$(path) removed";)
	mkdir -p deps

.PHONY: setup_env
setup_env:
	./scripts/setup.py

.PHONY: setup_image
setup_image: ## Pull or build the docker image based on the image version
ifeq ($(call IS_LOCAL), true)
	$(MAKE) docker_build_web
else
	$(MAKE) docker_pull_web
endif

.PHONY: setup_deps
setup_deps: ## Install development dependencies
# If we are running a non-local image, or if we are running a production image target,
# Then we should first clean the host ./deps directory to ensure a clean install.
ifeq ($(or $(IS_LOCAL), $(eq $(call READ_ENV,DOCKER_TARGET), production)), false)
	$(MAKE) clean_deps
endif
# We mount the ./deps directory from the host into the container
# so we need to update the dependencies on the host to match the
# dependencies from the current image based on the DOCKER_TARGET environment variable
	$(MAKE) docker_compose_run \
		ARGS="make \
			-f Makefile-docker \
			update_deps_$(shell echo $(call READ_ENV,DOCKER_TARGET)) \
			INSTALL_CI_DEPS='true'"

.PHONY: setup_compose
setup_compose:  ## Setup the docker compose project
	$(MAKE) docker_mysqld_volume_create

.PHONY: setup
setup: setup_files setup_env setup_image setup_compose setup_deps ## Setup the project to run

.PHONY: push_locales
push_locales: ## extracts and merges translation strings
	bash ./scripts/push_l10n_extraction.sh $(ARGS)

.PHONY: update_docker
update_docker: data_export up data_restore ## update all the docker images

.PHONY: shell
shell: ## connect to a running addons-server docker shell
	docker compose exec --user olympia web bash

.PHONY: rootshell
rootshell: ## connect to a running addons-server docker shell with root user
	docker compose exec --user root web bash

.PHONY: docker_compose_config
docker_compose_config: ## Show the docker compose configuration
	@docker compose config web --format json

.PHONY: docker_build_web
docker_build_web: ## Build the docker images using buildx bake
	docker buildx bake $(DOCKER_BAKE_ARGS) $(ARGS)

.PHONY: docker_pull_web
docker_pull_web: ## Pull the latest docker image using current tag
	docker compose pull web --policy always

.PHONY: docker_mysqld_volume_create
docker_mysqld_volume_create: ## Create the mysqld volume
	docker volume create $(DOCKER_MYSQLD_VOLUME)

.PHONY: docker_mysqld_volume_remove
docker_mysqld_volume_remove: ## Remove the mysqld volume
	docker volume rm $(DOCKER_MYSQLD_VOLUME)

.PHONY: docker_compose_down
docker_compose_down: ## Stop the docker containers
	docker compose down --rmi local --remove-orphans --volumes

.PHONY: docker_clean_volumes
docker_clean_volumes: ## Remove dangling volumes, skipping the mysqld volume
	docker volume prune \
		--filter label=com.docker.compose.project=addons-server \
		--all \
		--force

.PHONY: docker_clean_images
docker_clean_images: ## Remove dangling images
	docker image prune --filter "dangling=true" --force

.PHONY: docker_clean_build_cache
docker_clean_build_cache: ## Remove buildx build cache
	docker buildx prune -af

.PHONY: clean_docker
clean_docker: docker_compose_down docker_mysqld_volume_remove docker_clean_images docker_clean_volumes docker_clean_build_cache ## Remove all docker resources taking space on the host machine

.PHONY: clean_deps
clean_deps:
	rm -rf deps/**

.PHONY: docker_compose_up
docker_compose_up: ## Start the docker containers
	docker compose up \
		-d \
		--wait \
		--remove-orphans \
		--no-build \
		--quiet-pull \
		$(ARGS)

.PHONY: docker_compose_run
docker_compose_run: ## Run a command in the docker compose project
	docker compose run \
		--rm \
		--no-deps \
		$(DOCKER_RUN_ARGS) \
		web \
		$(ARGS)

.PHONY: up
up: setup docker_compose_up docker_clean_images docker_clean_volumes ## Create and start docker compose
	# Explicitly run initialize via the web container as make can get confused
	# both routing the command to the web container and
	# routing the command to the proper target.
	docker compose exec --user olympia web make -f Makefile-docker initialize ARGS=$(shell echo "'$(INITIALIZE_ARGS)'")

.PHONY: down
down: docker_compose_down docker_clean_images docker_clean_volumes ## Stop the docker containers and clean up non-peristent dangling resources

%: ## This directs any other recipe (command) to the web container's make.
	docker compose exec --user olympia web make $(MAKECMDGOALS) ARGS="$(shell echo $(ARGS))"

# You probably want to put new commands in Makefile-docker, unless they operate
# on multiple containers or are host-os specific.
