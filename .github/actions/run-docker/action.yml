name: 'Docker Run Action'
description: 'Run a command in a new container'
inputs:
  # Required Inputs
  registry:
    required: true
    description: docker registry to publish to
  image:
    required: true
    description: docker image to tag the image
  version:
    required: true
    description: docker image version to tag the image
  target:
    required: true
    description: docker image target to build to
  cache_from:
    required: false
    description: Cache to pull before building the image

  digest:
    description: A build digest to verify the image against
    required: true
    default: ''
  run:
    description: 'Run command in container'
    required: true
  services:
    description: 'List of services to start'
    required: false
    default: 'web'
  compose_file:
    description: 'The docker-compose file to use'
    required: false
    default: 'docker-compose.yml:docker-compose.ci.yml'

runs:
  using: 'composite'
  steps:
    - name: Build Docker image
      id: build
      uses: ./.github/actions/build-docker
      with:
        registry: ${{ inputs.registry }}
        image: ${{ inputs.image }}
        version: ${{ inputs.version }}
        cache_from: ${{ inputs.cache_from }}
        target: ${{ inputs.target }}

    - name: Verify image
      shell: bash
      run: |
        input_digest="${{ inputs.digest }}"
        build_digest="${{ steps.build.outputs.digest }}"

        if [[ "$input_digest" != "$build_digest" ]]; then
          echo "Invalid digest, something went wrong in the build"
          exit 1
        fi

    - id: id
      shell: bash
      run: |
        echo "id=$(id -u)" >> $GITHUB_OUTPUT

    - name: Run Docker Container
      shell: bash
      env:
        DOCKER_VERSION: ${{ steps.build.outputs.version }}
        COMPOSE_FILE: ${{ inputs.compose_file }}
        DOCKER_SERVICES: ${{ inputs.services }}
        HOST_UID: ${{ steps.id.outputs.id }}
      run: |
        # Start the specified services
        make up

        # Exec the run command in the container
        # quoted 'EOF' to prevent variable expansion
        cat <<'EOF' | docker compose exec --user olympia web sh
          ${{ inputs.run }}
        EOF

    - name: Logs
      shell: bash
      if: failure()
      run: docker compose logs
