name: 'Docker Build'
description: 'Builds `addons-server` docker image'
inputs:
  no_cache:
    required: false
    description: "Build fresh image without cache"
    default: "false"
  push_image:
    required: false
    description: "Build and push image to registry"
    default: "false"
  pull_image:
    required: false
    description: "Build and push image to registry"
    default: "false"
  docker_cache_dir:
    required: false
    description: "Docker cache directory"
    default: /tmp/cache/docker-ci
  python_version:
    required: false
    description: "Python version"
    default: "3.10"

outputs:
  tags:
    description: "The Docker tags for the image"
    value: ${{ steps.meta.outputs.tags }}

runs:
  using: "composite"
  steps:
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: ${{ inputs.docker_cache_dir }}
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        version: latest
        buildkitd-flags: --debug

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Initialize cache directory"
      shell: bash
      run: mkdir -p ${{ inputs.docker_cache_dir }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          # default
          type=schedule
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr
          # set latest tag for default branch
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        pull: ${{ inputs.pull_image }}
        push: ${{ inputs.push_image }}
        load: true
        no-cache: ${{ inputs.no_cache }}
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
            PYTHON_VERSION=${{ inputs.python_version }}
