name: 'Docker Build'
description: 'Builds `addons-server` docker image'
inputs:
    # Required Inputs
    registry:
      required: true
      description: docker registry to publish to
    image:
      required: true
      description: docker image to tag the image
    version:
      required: true
      description: docker image version to tag the image
    target:
      required: true
      description: docker image target to build to
    # Optional Inputs
    username:
      required: false
      description: the username to login with
      default: ''
    password:
      required: false
      description: the password to login with
      default: ''
    push:
      required: false
      description: should the image be pushed to the specified registry
      default: 'false'
    cache_to:
      required: false
      description: Cache the docker image layers to a remote store
    cache_from:
      required: false
      description: Cache to pull before building the image

outputs:
  digest:
    description: "The Docker image digest"
    value: ${{ steps.digest.outputs.digest }}
  version:
    description: "The Docker version for the image"
    value: ${{ steps.docker_meta.outputs.version }}
  tags:
    description: "The Docker tags for the image"
    value: ${{ steps.docker_meta.outputs.tags }}

runs:
  using: "composite"
  steps:
    - id: input_meta
      shell: bash
      run: |
        registry="${{ inputs.registry }}"
        image="${{ inputs.image }}"
        version="${{ inputs.version }}"
        target="${{ inputs.target }}"
        username="${{ inputs.username }}"
        password="${{ inputs.password }}"
        push="${{ inputs.push }}"
        cache_to="${{ inputs.cache_to }}"
        cache_from="${{ inputs.cache_from }}"

        echo "registry=$registry" >> $GITHUB_OUTPUT
        echo "image_file=image.tar" >> $GITHUB_OUTPUT
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "target=$target" >> $GITHUB_OUTPUT
        echo "cache_to=$cache_to" >> $GITHUB_OUTPUT
        echo "cache_from=$cache_from" >> $GITHUB_OUTPUT

        if [[ "$target" != 'development' && "$target" != 'production' ]]; then
          echo "invalid target $target. Expected `production` or `development`"
          exit 1
        else
          echo "target=$target" >> $GITHUB_OUTPUT
        fi

        base_image="$registry/$image"
        echo "base_image=$base_image" >> $GITHUB_OUTPUT

        if [[ "$push" == 'true' ]]; then
          if [[ "$username" == '' ||  "$password" == '' ]]; then
            echo "username and password are required when pushing an image"
            exit 1
          fi
        fi
        echo "push=$push" >> $GITHUB_OUTPUT

        cat $GITHUB_OUTPUT

    - name: Docker meta
      id: docker_meta
      env:
        version: ${{ steps.input_meta.outputs.version }}
        suffix: -next
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.input_meta.outputs.base_image }}
        tags: |
            # use raw tag to allow the calling workflow to define the version of the image
            # and to prevent multiple tags from being associated with a build
            type=raw,value=${{ env.version }},suffix=${{ env.suffix }}

    # Setup docker to build for multiple architectures
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        version: latest
        buildkitd-flags: --debug

    - name: Login
      id: login
      if: ${{ steps.input_meta.outputs.push == 'true' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ steps.input_meta.outputs.registry }}
        # Read username and password directly from inputs as they are likely secrets
        # and cannot be passed around between step outputs
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - name: Local Environment Setup
      shell: bash
      env:
        DOCKER_VERSION: ${{ steps.docker_meta.outputs.version }}
        DOCKER_COMMIT: ${{ github.sha }}
        VERSION_BUILD_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      run: |
        make setup

    - name: Build Image
      id: build
      uses: docker/bake-action@v4
      with:
        targets: web
        load: true
        push: ${{ steps.login.outcome == 'success' && steps.input_meta.outputs.push == 'true' }}
        set: |
          *.cache-from=${{ steps.input_meta.outputs.cache_from }}
          *.cache-to=${{ steps.input_meta.outputs.cache_to }}

    - name: Get image digest
      id: digest
      shell: bash
      env:
        BUILDX_BAKE_METADATA_FILE: metadata.json
      run: |
        echo '${{ steps.build.outputs.metadata }}' > metadata.json
        echo "digest=$(cat metadata.json | jq -r '.web."containerimage.digest"')" >> $GITHUB_OUTPUT
