name: Build Docker image

run-name: |
  ref: ${{ github.ref_name }} |
  push: ${{ inputs.push }} |

on:
  workflow_dispatch:
    inputs:
      push:
        required: false
        type: boolean
        description: Push the image to registry?
        default: false
  workflow_call:
    inputs:
      push:
        required: false
        type: boolean
        description: Push the image to registry?
        default: false

    outputs:
      digest:
        description: The Docker image digest
        value: ${{ jobs.build.outputs.digest }}
      version:
        description: The Docker version for the image
        value: ${{ jobs.build.outputs.version }}
      tag:
        description: The Docker image tag
        value: ${{ jobs.build.outputs.tag }}


    secrets:
      DOCKER_USER:
        required: false
        description: The username for dockerhub
      DOCKER_PASS:
        required: false
        description: The password for dockerhub
      GAR_PUSHER_SERVICE_ACCOUNT_EMAIL:
        required: false
        description: The service account for authenticating with gar
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        required: false
        description: The GCP workload to use for identity management

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name}}-${{ github.ref}}-${{ toJson(inputs) }}
  cancel-in-progress: true

permissions:
  contents: 'read'
  id-token: 'write'

env:
  registry_docker: docker.io
  image_docker: ${{ github.repository }}

jobs:
  context:
    runs-on: ubuntu-latest

    outputs:
      is_fork: ${{ steps.context.outputs.is_fork }}

      registry: ${{ steps.build.outputs.registry }}
      image: ${{ steps.build.outputs.image }}
      version: ${{ steps.build.outputs.version }}
      cache_from: ${{ steps.build.outputs.cache_from }}
      cache_to: ${{ steps.build.outputs.cache_to  }}

      git_source_url: ${{ steps.git.outputs.git_source_url }}
      git_build_url: ${{ steps.git.outputs.git_build_url }}
      git_sha: ${{ steps.git.outputs.git_sha }}

    steps:
      - uses: actions/checkout@v4

      - name: Gather context
        id: context
        uses: ./.github/actions/context

      - name: Build Context
        id: build
        shell: bash
        run: |
          is_fork="${{ steps.context.outputs.is_fork }}"

          # Default values for registry/image/version
          registry="${{ env.registry_docker }}"
          image="${{ env.image_docker }}"
          version="${{ github.ref_name }}"

          # Make sure registry/image/version are all defined
          validating=("$registry" "$image" "$version")
          for item in "${validating[@]}"; do
            if [ -z "$item" ]; then
              echo "Expected all values to be defined."
              echo "registry: $registry"
              echo "image: $image"
              echo "version: $version"
              exit 1
            fi
          done

          echo "registry=$registry" >> $GITHUB_OUTPUT
          echo "image=$image" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

          cache_from="type=gha"
          cache_to="type=gha,mode=max,ignore-error=true"

          echo "cache_to=$cache_to" >> $GITHUB_OUTPUT
          echo "cache_from=$cache_from" >> $GITHUB_OUTPUT

          cat $GITHUB_OUTPUT

      - name: Git Context
        id: git
        shell: bash
        run: |
          git_repo_url="${{ github.server_url }}/${{ github.repository }}"

          echo "git_source_url=$git_repo_url.git#${{ github.ref }}" >> $GITHUB_OUTPUT
          echo "git_build_url=$git_repo_url/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "git_sha=${{ github.sha }}" >> $GITHUB_OUTPUT

          cat $GITHUB_OUTPUT

  pre_build:
    name: Log all context values
    needs: [context]
    runs-on: ubuntu-latest

    steps:
      - name: Context
        shell: bash
        run: |
          cat <<'EOF'
          ${{toJson(needs.context.outputs)}}
          EOF

      - name: Docker Auth
        shell: bash
        run: |
          docker system info
          cat ~/.docker/config.json

  build:
    needs: context
    if: needs.context.outputs.is_fork == 'false'
    runs-on: ubuntu-latest

    outputs:
      digest: ${{ steps.build_meta.outputs.digest }}
      version: ${{ steps.meta.outputs.version }}
      tag: ${{ steps.build_meta.outputs.tag }}

    steps:
      - uses: actions/checkout@v4

      # Setup docker to build for multiple architectures
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          buildkitd-flags: --debug

      # Login to a registry to push the image
      - name: Login to Container Registry
        # Only login if we are pushing the image
        if: ${{ inputs.push == true }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}


      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          bake-target: web
          images: ${{ needs.context.outputs.registry }}/${{ needs.context.outputs.image }}
          tags: |
              # use raw tag to allow internally defining the version of the image
              # and to prevent multiple tags from being associated with a build
              # TODO remove suffix when we enable the build in production
              type=raw,value=${{ needs.context.outputs.version }},suffix=-next

      - name: Create .env and version.json files
        shell: bash
        env:
          DOCKER_VERSION: ${{ steps.meta.outputs.version }}
          DOCKER_COMMIT: ${{ needs.context.outputs.git_sha }}
          VERSION_BUILD_URL: ${{ needs.context.outputs.git_build_url }}
        run: make setup

      - name: Build Image
        id: build
        uses: docker/bake-action@v4
        with:
          targets: web
          files: |
            docker-compose.yml
            ${{ steps.meta.outputs.bake-file-labels }}
            ${{ steps.meta.outputs.bake-file-annotations }}
          push: ${{ inputs.push }}
          load: ${{ inputs.push == false }}
          set: |
            *.cache-from=${{ needs.context.outputs.cache_from }}
            *.cache-to=${{ needs.context.outputs.cache_to }}

      - name: Get image digest
        id: build_meta
        shell: bash
        env:
          BUILDX_BAKE_METADATA_FILE: metadata.json
        run: |
          echo '${{ steps.build.outputs.metadata }}' > metadata.json
          echo "digest=$(cat metadata.json | jq -r '.web."containerimage.digest"')" >> $GITHUB_OUTPUT
          echo "tag=$(cat metadata.json | jq -r '.web."image.name"')" >> $GITHUB_OUTPUT

      # Only continue if we are releasing
      # Login to GAR to publish production image
      - name: get the GCP auth token
        id: gcp-auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          service_account: ${{ secrets.GAR_PUSHER_SERVICE_ACCOUNT_EMAIL }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}

      - name: login to GAR
        uses: docker/login-action@v3
        with:
          registry: us-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.gcp-auth.outputs.access_token }}
