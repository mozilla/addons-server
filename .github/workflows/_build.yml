name: Build Docker image

run-name: |
  ref: ${{ github.ref_name }} |
  push: ${{ inputs.push }} |

on:
  workflow_dispatch:
    inputs:
      push:
        required: false
        type: boolean
        description: Push the image to registry?
        default: false
  workflow_call:
    inputs:
      push:
        required: false
        type: boolean
        description: Push the image to registry?
        default: false

    outputs:
      digest:
        description: The Docker image digest
        value: ${{ jobs.build.outputs.digest }}
      version:
        description: The Docker version for the image
        value: ${{ jobs.build.outputs.version }}
      tag:
        description: The Docker image tag
        value: ${{ jobs.build.outputs.tag }}


    secrets:
      DOCKER_USER:
        required: false
        description: The username for dockerhub
      DOCKER_PASS:
        required: false
        description: The password for dockerhub
      GAR_PUSHER_SERVICE_ACCOUNT_EMAIL:
        required: false
        description: The service account for authenticating with gar
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        required: false
        description: The GCP workload to use for identity management

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name}}-${{ github.ref}}-${{ toJson(inputs) }}
  cancel-in-progress: true

permissions:
  contents: 'read'
  id-token: 'write'

env:
  registry_docker: docker.io
  image_docker: ${{ github.repository }}
  registry_gar: us-docker.pkg.dev
  image_gar: moz-fx-amo-prod/amo-prod/addons-server

jobs:
  context:
    runs-on: ubuntu-latest

    outputs:
      is_fork: ${{ steps.context.outputs.is_fork }}
      push: ${{ steps.docker.outputs.push }}

      git_build_url: ${{ steps.git.outputs.git_build_url }}
      git_sha: ${{ steps.git.outputs.git_sha }}

    steps:
      - uses: actions/checkout@v4

      - name: Gather context
        id: context
        uses: ./.github/actions/context

      - name: Docker Context
        id: docker
        shell: bash
        run: |
          push="${{ inputs.push }}"
          is_fork="${{ steps.context.outputs.is_fork }}"

          # Forks cannot authenticate and therefore cannot push
          if [[ "$is_fork" == 'true' ]]; then
            push=false
          fi

          echo "push=$push" >> $GITHUB_OUTPUT

          cat $GITHUB_OUTPUT

      - name: Git Context
        id: git
        shell: bash
        run: |
          git_repo_url="${{ github.server_url }}/${{ github.repository }}"

          echo "git_build_url=$git_repo_url/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "git_sha=${{ github.sha }}" >> $GITHUB_OUTPUT

          cat $GITHUB_OUTPUT

  pre_build:
    name: Log all context values
    needs: [context]
    runs-on: ubuntu-latest

    steps:
      - name: Context
        shell: bash
        run: |
          cat <<'EOF'
          ${{toJson(needs.context.outputs)}}
          EOF

      - name: Docker Auth
        shell: bash
        run: |
          docker system info
          cat ~/.docker/config.json

  build:
    needs: context
    if: needs.context.outputs.is_fork == 'false'
    runs-on: ubuntu-latest

    outputs:
      digest: ${{ steps.build_meta.outputs.digest }}
      version: ${{ steps.meta.outputs.version }}
      tag: ${{ steps.build_meta.outputs.tag }}

    steps:
      - uses: actions/checkout@v4

      # Setup docker to build for multiple architectures
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          buildkitd-flags: --debug

      - name: Login to Dockerhub
        if: needs.context.outputs.push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registry_docker}}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: get the GCP auth token
        if: needs.context.outputs.push == 'true'
        id: gcp-auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          service_account: ${{ secrets.GAR_PUSHER_SERVICE_ACCOUNT_EMAIL }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}

      - name: login to GAR
        if: steps.gcp-auth.outcome == 'success'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registry_gar }}
          username: oauth2accesstoken
          password: ${{ steps.gcp-auth.outputs.access_token }}

      - name: Docker Auth
        shell: bash
        run: |
          docker system info
          cat ~/.docker/config.json

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          bake-target: web
          images: |
            ${{ env.registry_docker }}/${{ env.image_docker }}
            ${{ env.registry_gar }}/${{ env.image_gar }}
          flavor: |
            suffix=-next
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=ref,event=pr

      - name: Create .env and version.json files
        shell: bash
        env:
          DOCKER_VERSION: ${{ steps.meta.outputs.version }}
          DOCKER_COMMIT: ${{ needs.context.outputs.git_sha }}
          VERSION_BUILD_URL: ${{ needs.context.outputs.git_build_url }}
        run: make setup

      - name: Build Image
        id: build
        uses: docker/bake-action@v4
        with:
          targets: web
          files: |
            docker-compose.yml
            ${{ steps.meta.outputs.bake-file-tags }}
            ${{ steps.meta.outputs.bake-file-labels }}
            ${{ steps.meta.outputs.bake-file-annotations }}
          push: ${{ needs.context.outputs.push }}
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max,ignore-error=true

      - name: Get image digest
        id: build_meta
        shell: bash
        env:
          BUILDX_BAKE_METADATA_FILE: metadata.json
        run: |
          echo '${{ steps.build.outputs.metadata }}' > metadata.json
          echo "digest=$(cat metadata.json | jq -r '.web."containerimage.digest"')" >> $GITHUB_OUTPUT
          echo "tag=$(cat metadata.json | jq -r '.web."image.name"')" >> $GITHUB_OUTPUT
