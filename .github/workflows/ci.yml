name: CI

on:
  pull_request:
  workflow_dispatch:
    inputs:
      target:
        required: true
        description: docker image target to build to
        type: choice
        options:
          - development
          - production
      cache_to:
        required: false
        description: Cache the docker image layers to a remote store
        type: string
      cache_from:
        required: false
        description: Cache to pull before building the image
        type: string
  # Runs when a release is published
  # Pushes a tagged image
  # That is deployed to the "staging/production" environments
  release:
    types: [published]

concurrency:
  # different events on the same ref can run in parallel
  # different refs on the same event can run in parallel
  # different splits on the same ref + event can run in parallel
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name}}-${{ inputs.target }}
  cancel-in-progress: true

env:
  docs_artifact: docs

jobs:
  context:
    runs-on: ubuntu-latest

    outputs:
      is_fork: ${{ steps.context.outputs.is_fork }}
      is_dependabot: ${{ steps.context.outputs.is_dependabot }}
      is_default_branch: ${{ steps.context.outputs.is_default_branch }}

    steps:
      - uses: actions/checkout@v4
      - name: Set context
        id: context
        uses: ./.github/actions/context

  build_workflow:
    permissions:
      contents: read
      id-token: write
    uses: ./.github/workflows/_build.yml
    with:
      artifact_name: build-docker-next-development
    secrets: inherit

  build:
    runs-on: ubuntu-latest
    needs: context
    outputs:
      artifact_name: ${{ steps.build.outputs.artifact_name }}
      tag: ${{ steps.build.outputs.tag }}

    steps:
      - uses: actions/checkout@v4
      - id: build
        uses: ./.github/actions/build-docker
        with:
          registry: docker.io
          image: ${{ github.repository }}
          version: pr-${{ github.event.pull_request.number }}
          # For mannual dispatch, use the input, if not defined or for PR use the default
          target: ${{ inputs.target || 'development' }}
          cache_to: ${{ inputs.cache_to || 'type=gha,mode=max' }}
          cache_from: ${{ inputs.cache_from || 'type=gha' }}
          push: ${{ needs.context.outputs.is_fork != 'true' }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

  test_make_docker_configuration:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v2
      - name: Install dependencies
        shell: bash
        run: npm ci
      - name: Check make/docker configuration
        shell: bash
        run: |
          docker compose version
          npm exec jest -- ./tests/make --runInBand

  test_run_docker_action:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Create failure
        id: failure
        continue-on-error: true
        uses: ./.github/actions/run-docker
        with:
          artifact_name: ${{ needs.build.outputs.artifact_name }}
          tag: ${{ needs.build.outputs.tag }}
          run: |
            exit 1

      - name: Verify failure
        if: steps.failure.outcome == 'success'
        run: |
          echo "Expected failure"
          exit 1

      - name: Check (special characters in command)
        uses: ./.github/actions/run-docker
        with:
          artifact_name: ${{ needs.build.outputs.artifact_name }}
          tag: ${{ needs.build.outputs.tag }}
          run: |
            echo 'this is a question?'
            echo 'a * is born'
            echo 'wow an array []'

  test:
    needs: build
    uses: ./.github/workflows/_test.yml
    with:
      artifact_name: ${{ needs.build.outputs.artifact_name }}
      tag: ${{ needs.build.outputs.tag }}

  test_main:
    needs: build
    uses: ./.github/workflows/_test_main.yml
    with:
      artifact_name: ${{ needs.build.outputs.artifact_name }}
      tag: ${{ needs.build.outputs.tag }}
