name: Test Docker Image (test_main only)

run-name: |
  Test ${{ github.workflow }} name: ${{ inputs.artifact_name }} splits: ${{ inputs.splits }}

on:
  workflow_call:
    inputs:
      artifact_name:
        description: The name of the artifact to download
        type: string
        required: true
      splits:
        description: How many splits for test_main
        type: number
        required: false
        default: 14

env:
  log_artifact: test_main_logs
  log_file: report.json

jobs:
  test_config:
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.result.outputs.matrix }}
      splits: ${{ steps.result.outputs.splits }}

    steps:
      - uses: actions/checkout@v4

      - name: Calculate splits
        id: result
        shell: bash
        run: |
          splits=${{ inputs.splits }}
          echo "splits: $splits"
          echo "splits=$splits" >> $GITHUB_OUTPUT

          # Construct the matrix input for test_main using the groups count
          # the matrix.group should be an array of numbers from 1 to $splits
          matrix=[$(seq -s, 1 $splits)]
          echo "matrix: $matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  test_main:
    runs-on: ubuntu-latest
    needs: test_config
    strategy:
      fail-fast: false
      matrix:
        group: ${{fromJson(needs.test_config.outputs.matrix)}}

    steps:
      - uses: actions/checkout@v4

      - name: Download Docker image from build
        id: image
        uses: ./.github/actions/download-docker
        with:
          artifact_name: ${{ inputs.artifact_name }}

      - name: Test (test_matrix)
        uses: ./.github/actions/run-docker
        with:
          services: ''
          tag: ${{ steps.image.outputs.tag }}
          compose_file: docker-compose.yml
          run: |
            split="--splits ${{ needs.test_config.outputs.splits }}"
            group="--group ${{ matrix.group }}"
            report="--report-log ${{ env.log_file}}"
            make test_main ARGS="${split} ${group} ${report}"

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.log_file }}
          name: ${{ env.log_artifact }}-${{ matrix.group }}
          retention-days: 1
          overwrite: true

  test_log:
    runs-on: ubuntu-latest
    if: always()
    needs: [test_config, test_main]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.log_artifact }}*

      - name: Cat logs
        shell: bash
        run: |
          for dir in $(ls -d ${{ env.log_artifact }}* | sort -V); do
            job=$(basename "$dir")
            file="${dir}/${{ env.log_file }}"
            if [ -f "$file" ]; then
              cat "$file" | jq \
                -r \
                --arg job "$job" \
                'select(has("when") and .when == "teardown") | "[\($job)] \(.outcome) \(.nodeid)"'
            else
              echo "$file: No such file or directory"
            fi
          done

