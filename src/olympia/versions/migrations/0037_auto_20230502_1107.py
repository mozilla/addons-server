# Generated by Django 3.2.18 on 2023-05-02 11:07

from datetime import timedelta

from django.db import migrations
from django.db.models import F

from olympia.constants.base import (
    ADDON_EXTENSION,
    STATUS_AWAITING_REVIEW,
    STATUS_DISABLED,
)
from olympia.constants.reviewers import REVIEWER_STANDARD_REVIEW_TIME
from olympia.versions.utils import get_review_due_date


def reset_due_dates_too_far_in_future_for_versions_awaiting_review(apps, schema_editor):
    Version = apps.get_model('versions', 'Version')
    # Allow an extra minute to account for processing time at version creation.
    max_due_date_delta = timedelta(days=REVIEWER_STANDARD_REVIEW_TIME, minutes=1)
    # Note: this might return some versions for which the due date doesn't need
    # to be reset, since the due date can be further in the future than just
    # the standard review time once we take weekends into account, but that's
    # fine - what matter is that we are filtering out _most_ versions that we
    # don't need to touch, a little extra work is ok.
    qs = Version.unfiltered.filter(
        file__status=STATUS_AWAITING_REVIEW,
        addon__type=ADDON_EXTENSION,
        due_date__gt=F('created') + max_due_date_delta,
    ).exclude(addon__status=STATUS_DISABLED)
    for version in qs:
        version.due_date = get_review_due_date(starting=version.created)
        version.save()


class Migration(migrations.Migration):
    dependencies = [
        ('versions', '0036_backfill-human-review-date-more-agressively'),
    ]

    operations = [
        migrations.RunPython(
            reset_due_dates_too_far_in_future_for_versions_awaiting_review
        )
    ]
