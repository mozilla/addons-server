x-env-mapping: &env
  # https://docs.docker.com/compose/environment-variables/envvars-precedence/
  env_file:
    - .env
  environment:
    - CELERY_BROKER_URL=amqp://olympia:olympia@rabbitmq/olympia
    - CELERY_RESULT_BACKEND=redis://redis:6379/1
    - DATABASES_DEFAULT_URL=mysql://root:@mysqld/olympia
    - ELASTICSEARCH_LOCATION=elasticsearch:9200
    - MEMCACHE_LOCATION=memcached:11211
    - MYSQL_DATABASE=olympia
    - MYSQL_ROOT_PASSWORD=docker
    - OLYMPIA_SITE_URL=http://olympia.test
    - PYTHONDONTWRITEBYTECODE=1
    - PYTHONUNBUFFERED=1
    - PYTHONBREAKPOINT=ipdb.set_trace
    - TERM=xterm-256color
    - HISTFILE=/data/olympia/docker/artifacts/bash_history
    - HISTSIZE=50000
    - HISTIGNORE=ls:exit:"cd .."
    - HISTCONTROL=erasedups
    - CIRCLECI
    - HOST_UID
    - DEBUG
    - DATA_BACKUP_SKIP
    - DOCKER_TARGET
    - INSTALL_CI_DEPS

# Define the volume to use for the olympia mount
# production: mount the files from the container, effectively disabling the mount
# development: mount the host files, mapping host files into the container
x-olympia-mount: &olympia-mount
  data_olympia_${DATA_OLYMPIA_MOUNT}:/data/olympia

services:
  web:
    <<: *env
    image: ${DOCKER_TAG:-}
    # We don't want docker compose to manage the image for us.
    # We sometimes build the image locally and sometimes pull from a registry
    # but docker compose should always assume the image is available.
    pull_policy: never
    # We drop down to a different user through entrypoint.sh, but starting as
    # root allows us to fix the ownership of files generated at image build
    # time through the ./docker/entrypoint.sh script.
    user: root
    platform: linux/amd64
    entrypoint: ["/data/olympia/docker/entrypoint.sh"]
    command: honcho start
    volumes:
      # Mount dependencies from the host
      # make docker_update_deps ensures this volume has correct contents
      - data_deps:/deps
      # Mount the /data/olympia directory from the specified volume
      - *olympia-mount
      # Mount static asset folders to empty volumes to
      # ensure these directories map to original container paths,
      # even if we mount host directories to /data/olympia.
      - data_static_build:/data/olympia/static-build
      - data_site_static:/data/olympia/site-static
    extra_hosts:
     - "olympia.test:127.0.0.1"
    restart: on-failure:5
    # entrypoint.sh takes some time
    # we can wait for services to be up and running
    healthcheck:
      test: ["CMD-SHELL", "/data/olympia/docker/healthcheck.sh"]
      # The interval is 90s after the start period of 60s
      interval: 90s
      # 3 failed attempts result in container failure
      retries: 3
      # While starting, ping faster to get the container healthy as soon as possible
      start_interval: 1s
      # The start period is 60s
      start_period: 120s
    depends_on:
      - mysqld
      - elasticsearch
      - redis
      - memcached
      - rabbitmq
      - autograph

  nginx:
    image: nginx
    volumes:
      - data_nginx:/etc/nginx/conf.d
      # Mount data olympia directories to expose static files over nginx
      - *olympia-mount
      # Alwasy mount the site-static directory from the container
      # never the host directory
      - data_site_static:/data/olympia/site-static
    ports:
      - "80:80"
    networks:
      default:
        aliases:
          - olympia.test
    depends_on:
      # To prevent race conditions mounting data_olympia volume
      # nginx should start after web service is up
      - web

  memcached:
    image: memcached:1.4
    # Remove this once we upgrade to a version that provides multi-platform images
    platform: linux/amd64

  mysqld:
    image: mysql:8.0
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
      - MYSQL_DATABASE=olympia
    command:
      # Optimize for development speed over durability
      - --innodb-flush-log-at-trx-commit=0
      - --innodb-buffer-pool-size=64M
      - --innodb-log-buffer-size=8M
      - --innodb-log-file-size=32M
      # Skip DNS lookups
      - --skip-name-resolve
      # Disable performance schema for faster startup
      - --performance-schema=OFF
    ports:
    - "3306:3306"
    volumes:
      - data_mysqld:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysql -u root --silent --execute='SELECT 1;'"]
      start_interval: 1s
      timeout: 2s
      start_period: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
    environment:
      # Disable all xpack related features to avoid unrelated logging
      # in docker logs. https://github.com/mozilla/addons-server/issues/8887
      # This also avoids us to require authentication for local development
      # which simplifies the setup.
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - xpack.graph.enabled=false
      - xpack.watcher.enabled=false
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    mem_limit: 2g

  redis:
    image: redis:6.2
    volumes:
      - data_redis:/data

  rabbitmq:
    image: rabbitmq:3.12
    hostname: olympia
    volumes:
      - data_rabbitmq:/var/lib/rabbitmq
    expose:
      - "5672"
    environment:
      - RABBITMQ_DEFAULT_USER=olympia
      - RABBITMQ_DEFAULT_PASS=olympia
      - RABBITMQ_DEFAULT_VHOST=olympia

  autograph:
    image: mozilla/autograph:3.3.2
    platform: linux/amd64
    command: /go/bin/autograph -c /data/autograph/autograph_localdev_config.yaml
    volumes:
      - data_autograph:/data/autograph

  addons-frontend:
    <<: *env
    image: mozilla/addons-frontend:latest
    platform: linux/amd64
    environment:
      # We change the proxy port (which is the main entrypoint) as well as the
      # webpack port to avoid a conflict in case someone runs both addons-server
      # and addons-frontend locally, with the frontend configured to access
      # addons-server locally.
      - PROXY_PORT=7010
      - WEBPACK_SERVER_PORT=7011
    ports:
      # We need to expose this port so that statics can be fetched (they are
      # exposed using webpack and not by the node app server).
      - 7011:7011
    command: yarn amo:olympia

networks:
  default:
    driver: bridge
    enable_ipv6: false

volumes:
  # Volume for static assets in the container
  data_static_build:
  data_site_static:
  # Volume for rabbitmq/redis to avoid anonymous volumes
  data_rabbitmq:
  data_redis:
  # Volume for dependencies
  data_deps:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/deps
  # Volume for the database
  data_mysqld:
    # Keep this value in sync with Makefile-os
    # External volumes must be manually created/destroyed
    name: addons-server_data_mysqld
    external: true
  # Volume for mounting the container filesystem to the web container
  data_olympia_production:
  # Volume for mounting host files to the web container
  data_olympia_development:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}
  # Volume for nginx configuration
  data_nginx:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/nginx
  # Volume for autograph configuration
  data_autograph:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/autograph
